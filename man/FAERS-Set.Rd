% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sets.R
\name{FAERS-Set}
\alias{FAERS-Set}
\alias{faers_union}
\alias{faers_intersetct}
\title{Set Operations for FAERS objects}
\usage{
faers_union(...)

faers_intersetct(...)
}
\arguments{
\item{...}{A collection of multiple \link{FAERSxml} or \link{FAERSascii} objects, or a
list containing \link{FAERSxml} or \link{FAERSascii} objects. These objects can be
either completely standardized using \link{faers_standardize} or not standardized
at all. Additionally, they can be fully de-duplicated using \link{faers_dedup} or
not de-duplicated at all.}
}
\value{
A \link{FAERSxml} or \link{FAERSascii} object.
}
\description{
Similar to the set functions in base R (\code{union} and \code{intersect}), the
\code{faers_union} and \code{faers_intersect} functions are specifically designed for
use with the \link{FAERS} objects. It is important to note that all data passed to
these functions via the \code{...} argument must belong to the same FAERS object,
indicating that they have the same period data (as defined by faers_period).
In many cases, this data is obtained by applying the \link{faers_filter} or
\link{faers_keep} function within the same FAERS object.
}
\examples{
# the files included in the package are sampled
data1 <- faers_parse(
    system.file("extdata", "aers_ascii_2004q1.zip", package = "faers"),
    compress_dir = tempdir()
)
data2 <- faers_parse(
    system.file("extdata", "faers_ascii_2017q2.zip", package = "faers"),
    compress_dir = tempdir()
)
# It is not possible to use Set Operations on `data1` and `data2` as they are
# derived from different time periods.  in this way, it would be more
# appropriate to employ the function `faers_combine()` to combine them
data <- faers_combine(data1, data2)
interested_data1 <- faers_filter(data, function(drug) {
    # just for example, no meanning
    drug[grepl("ALCOHOL", drugname, ignore.case = TRUE) |
        grepl("ALCOHOL", prod_ai, ignore.case = TRUE), primaryid]
}, .field = "drug")
interested_data2 <- faers_filter(data, function(drug) {
    # just for example, no meanning
    drug[grepl("HUMIRA", drugname, ignore.case = TRUE) |
        grepl("HUMIRA", prod_ai, ignore.case = TRUE), primaryid]
}, .field = "drug")
# I don't known whether to union primaryid or just rows identity
faers_union(interested_data1, interested_data2)
}
